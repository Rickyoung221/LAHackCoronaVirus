<!DOCTYPE html>
<!-- saved from url=(0046)https://semantic-ui.com/examples/homepage.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <!-- Standard Meta -->
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">

  <!-- Site Properties -->
  <title>Homepage</title>
  <link rel="stylesheet" type="text/css" href="./Semantic-UI-CSS-master/semantic.css">
  <style type="text/css">
    #map {
      height: 100%;
    }
    .masthead.segment {
      min-height: 700px;
      padding: 1em 0em;
    }
    .masthead h1.ui.header {
      margin-top: 3em;
      margin-bottom: 0em;
      font-size: 4em;
      font-weight: normal;
    }
    .masthead h2 {
      font-size: 1.7em;
      font-weight: normal;
    }
    .ui.vertical.stripe {
      padding: 5em 0em;
    }
  </style>

  <script src="./Semantic-UI-CSS-master/jquery.min.js"></script>
  <script>
  $(function() {
    $('a[href*=#]').on('click', function(e) {
      e.preventDefault();
      $('html, body').animate({ scrollTop: $($(this).attr('href')).offset().top}, 500, 'linear');
    });
  });
  </script>
</head>
<body>

<!-- Page Contents -->
  <div class="ui inverted vertical masthead center aligned segment">
    <div class="ui text container">
      <h1 class="ui inverted header">
        Covid-Safe Shopping
      </h1>
      <h2>Safe<img src="heart.png"> shopping markets on the map</h2>
      <div class="ui huge primary button"><a style="color: aliceblue;" href="#mapContent">Get Started</a>></div>
    </div>
  </div>
  <div style="padding-top: 3em; padding-bottom: 1em;" id="mapContent" class="ui container center aligned">
    <div class="ui search">
      <div style="width: 50%;" class="ui icon input">
        <input class="prompt" id="pac-input" type="text" placeholder="Add address...">
        <i class="search icon"></i>
      </div>
    </div>
  </div>
  <div id="map"></div>

  <div style="padding-top: 3em;" class="ui horizontal divider">
    Recommended markets
  </div>

  <div class="ui container center aligned">
    <table class="ui celled table">
      <thead>
        <tr><th class="single line">Rating</th>
        <th>Market Name</th>
        <th>Distance</th>
        <th>Address</th>
      </tr></thead>
      <tbody id="output">
        <!-- <tr>
          <td>
            <h2 style="color: silver;" class="ui center aligned header">#1</h2>
          </td>
          <td class="single line">
            Market 1
          </td>
          <td>23.7km</td>
          <td>Creatine supplementation is the reference compound for increasing muscular creatine levels; the</td>
        </tr>

        <tr>
          <td>
            <h2 style="color: brown;" class="ui center aligned header">#2</h2>
          </td>
          <td class="single line">
            Market 2
          </td>
          <td>29.7km</td>
          <td>Creatine is the reference compound for power improvement, with numb</td>
        </tr> -->
      </tbody>
    </table>
  </div>
  
  

<script>
  function initAutocomplete() {
      // initialize map on LA
      var map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: 34.0522, lng: -118.2437},
        zoom: 11,
        mapTypeId: 'roadmap'
      });
      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
        searchBox.setBounds(map.getBounds());
      });

      var infoWindow = new google.maps.InfoWindow;
      var rows;
      // Change this depending on the name of your PHP or XML file
      downloadUrl('https://data.lacity.org/api/views/g986-7yf9/rows.xml?accessType=DOWNLOAD', function(data) {
        var xml = data.responseXML;
        rows = xml.getElementsByTagName("row");
        var count = 0;
        Array.prototype.forEach.call(rows, function(row) {
          if (row.children.length < 100 & count < 400) {
              if (row.getElementsByTagName("dba_name")[0] === undefined)
                  var name = row.getElementsByTagName("business_name")[0].childNodes[0].data; 
              else
                  var name = row.getElementsByTagName("dba_name")[0].childNodes[0].data; 
              var street = row.getElementsByTagName("street_address")[0].childNodes[0].data;
              if (row.getElementsByTagName("location_1")[0] !== undefined)
                  var point = new google.maps.LatLng(parseFloat(row.getElementsByTagName("location_1")[0].getAttribute('latitude')), parseFloat(row.getElementsByTagName("location_1")[0].getAttribute('longitude')));
              
              var infowincontent = document.createElement('div');
              var strong = document.createElement('strong');
              strong.textContent = name
              infowincontent.appendChild(strong);
              infowincontent.appendChild(document.createElement('br'));
              var text = document.createElement('text');
              text.textContent = street;
              infowincontent.appendChild(text);
              var markets = new google.maps.Marker({
                  map: map,
                  position: point,
                  label: 'M'
              });
              markets.addListener('click', function() {
                  console.log(infowincontent);
                  infoWindow.setContent(infowincontent);
                  infoWindow.open(map, markets);
              });
              count++;
          }   
        });
      });
      var markers = [];
      // Listen for the event fired when the user selects a prediction and retrieve
      // more details for that place.
      searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();
          if (places.length == 0)
            return;
          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];
          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          if (!places[0].geometry) {
            console.log("Returned place contains no geometry");
            return;
          }
          var icon = {
            url: places[0].icon,
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(25, 25)
          };
          // Create a marker for each place.
          markers.push(new google.maps.Marker({
            map: map,
            icon: icon,
            title: places[0].name,
            position: places[0].geometry.location
          }));
          if (places[0].geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(places[0].geometry.viewport);
          } else {
            bounds.extend(places[0].geometry.location);
          }
          map.fitBounds(bounds);

          /**
           * calculate travel distance
           */
          var origin = places[0].geometry.location.toJSON() 
          var destinations = []
          var dest_names = []
          count = 0;
          Array.prototype.forEach.call(rows, function(row) {
            if (row.getElementsByTagName("location_1")[0] !== undefined & count < 25) {
                destinations.push({lat: parseFloat(row.getElementsByTagName("location_1")[0].getAttribute('latitude')), lng: parseFloat(row.getElementsByTagName("location_1")[0].getAttribute('longitude'))})
                if (row.getElementsByTagName("dba_name")[0] === undefined)
                  dest_names.push(row.getElementsByTagName("business_name")[0].childNodes[0].data); 
                else
                  dest_names.push(row.getElementsByTagName("dba_name")[0].childNodes[0].data); 
                count++;
            }
          });
          var service = new google.maps.DistanceMatrixService;
          service.getDistanceMatrix({
            origins: [origin],
            destinations: destinations,
            travelMode: 'DRIVING',
            unitSystem: google.maps.UnitSystem.METRIC,
            avoidHighways: false,
            avoidTolls: false
          }, function(response, status) {
            if (status !== 'OK') {
              alert('Error was: ' + status);
            } else {
              var originList = response.originAddresses;
              var destinationList = response.destinationAddresses;
              var outputDiv = document.getElementById('output');
              outputDiv.innerHTML = '';
              for (var i = 0; i < originList.length; i++) {
                var results = response.rows[i].elements;
                var dis_sorted = []
                for (var j=0; j<results.length; j++) {
                    if (results[j].distance !== undefined)
                        dis_sorted.push({value: results[j].distance.value, index: j});
                }
                dis_sorted.sort((a, b) => {
                    return a.value - b.value;
                });
                for (var j = 0; j < results.length; j++) {
                  if (j === 0)
                    var tempHTML = "<tr><td style=\"\"><h2 style=\"color: gold;\" class=\"ui center aligned header\">#"+(j+1)+"</h2></td>";
                  else if (j === 1)
                    var tempHTML = "<tr><td style=\"\"><h2 style=\"color: silver;\" class=\"ui center aligned header\">#"+(j+1)+"</h2></td>";
                  else if (j === 2)
                    var tempHTML = "<tr><td style=\"\"><h2 style=\"color: brown;\" class=\"ui center aligned header\">#"+(j+1)+"</h2></td>";
                  else
                    var tempHTML = "<tr><td style=\"\"><h3 class=\"ui center aligned \">#"+(j+1)+"</h3></td>";
                  tempHTML += "<td>"+dest_names[dis_sorted[j].index]+"</td>";
                  tempHTML += "<td>"+results[dis_sorted[j].index].distance.text+"</td>";
                  tempHTML += "<td>"+destinationList[j]+"</td></tr>";
                  outputDiv.innerHTML += tempHTML;
                  console.log(outputDiv);
                  // outputDiv.innerHTML += originList[i]+' to '+destinationList[j]+': '+ results[dis_sorted[j].index].distance.text+' in '+results[j].duration.text+'<br>';
                }
              }
            }
          });
      });
  }

  function downloadUrl(url, callback) {
    var request = window.ActiveXObject ? new ActiveXObject('Microsoft.XMLHTTP') : new XMLHttpRequest;
    request.onreadystatechange = function() {
      if (request.readyState == 4) {
        request.onreadystatechange = doNothing;
        callback(request, request.status);
      }
    };
    request.open('GET', url, true);
    request.send(null);
  }

  function doNothing() {}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBeiLe_l1SjazmA39AIBp_hSJHdPQqkH7g&libraries=places&callback=initAutocomplete"
async defer></script>
</body></html>