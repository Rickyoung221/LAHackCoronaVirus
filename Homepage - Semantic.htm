<!DOCTYPE html>
<!-- saved from url=(0046)https://semantic-ui.com/examples/homepage.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <!-- Standard Meta -->
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">

  <!-- Site Properties -->
  <title>Homepage</title>
  <link rel="stylesheet" type="text/css" href="./Semantic-UI-CSS-master/semantic.css">
  <style type="text/css">
    #map {
      height: 100%;
    }
    .masthead.segment {
      min-height: 700px;
      padding: 1em 0em;
    }
    .masthead h1.ui.header {
      margin-top: 3em;
      margin-bottom: 0em;
      font-size: 4em;
      font-weight: normal;
    }
    .masthead h2 {
      font-size: 1.7em;
      font-weight: normal;
    }
    .ui.vertical.stripe {
      padding: 5em 0em;
    }
  </style>

  <script src="./Homepage - Semantic_files/jquery.min.js"></script>
  <script>
  $(function() {
    $('a[href*=#]').on('click', function(e) {
      e.preventDefault();
      $('html, body').animate({ scrollTop: $($(this).attr('href')).offset().top}, 500, 'linear');
    });
  });
  </script>
</head>
<body>

<!-- Page Contents -->
  <div class="ui inverted vertical masthead center aligned segment">
    <div class="ui text container">
      <h1 class="ui inverted header">
        Safe Shopping
      </h1>
      <h2>Safe shopping markets on the map</h2>
      <div class="ui huge primary button"><a style="color: aliceblue;" href="#mapContent">Get Started</a>></div>
    </div>
  </div>
  <div style="padding-top: 3em; padding-bottom: 1em;" id="mapContent" class="ui container center aligned">
    <div class="ui search">
      <div style="width: 50%;" class="ui icon input">
        <input class="prompt" id="pac-input" type="text" placeholder="Add address...">
        <i class="search icon"></i>
      </div>
    </div>
  </div>
  <div id="map"></div>
  
  <!-- <div id="mapContent" class="ui vertical stripe segment">
    <div class="ui middle aligned stackable grid container">
      <div class="ui search">
        <div class="ui icon input">
          <input class="prompt" id="pac-input" type="text" placeholder="Add address...">
          <i class="search icon"></i>
        </div>
        <div class="results"></div>
      </div>
    </div>
  </div> -->

<script>
  function initAutocomplete() {
      // initialize map on LA
      var map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: 34.0522, lng: -118.2437},
        zoom: 11,
        mapTypeId: 'roadmap'
      });
      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
        searchBox.setBounds(map.getBounds());
      });

      var infoWindow = new google.maps.InfoWindow;
      var rows;
      // Change this depending on the name of your PHP or XML file
      downloadUrl('https://data.lacity.org/api/views/g986-7yf9/rows.xml?accessType=DOWNLOAD', function(data) {
        var xml = data.responseXML;
        rows = xml.getElementsByTagName("row");
        var count = 0;
        Array.prototype.forEach.call(rows, function(row) {
          if (row.children.length < 100 & count < 400) {
              if (row.getElementsByTagName("dba_name")[0] === undefined)
                  var name = row.getElementsByTagName("business_name")[0].childNodes[0].data; 
              else
                  var name = row.getElementsByTagName("dba_name")[0].childNodes[0].data; 
              var street = row.getElementsByTagName("street_address")[0].childNodes[0].data;
              if (row.getElementsByTagName("location_1")[0] !== undefined)
                  var point = new google.maps.LatLng(parseFloat(row.getElementsByTagName("location_1")[0].getAttribute('latitude')), parseFloat(row.getElementsByTagName("location_1")[0].getAttribute('longitude')));
              
              var infowincontent = document.createElement('div');
              var strong = document.createElement('strong');
              strong.textContent = name
              infowincontent.appendChild(strong);
              infowincontent.appendChild(document.createElement('br'));
              var text = document.createElement('text');
              text.textContent = street;
              infowincontent.appendChild(text);
              var markets = new google.maps.Marker({
                  map: map,
                  position: point,
                  label: 'M'
              });
              markets.addListener('click', function() {
                  console.log(infowincontent);
                  infoWindow.setContent(infowincontent);
                  infoWindow.open(map, markets);
              });
              count++;
          }   
        });
      });
      var markers = [];
      // Listen for the event fired when the user selects a prediction and retrieve
      // more details for that place.
      searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();
          if (places.length == 0)
            return;
          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];
          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          if (!places[0].geometry) {
            console.log("Returned place contains no geometry");
            return;
          }
          var icon = {
            url: places[0].icon,
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(25, 25)
          };
          // Create a marker for each place.
          markers.push(new google.maps.Marker({
            map: map,
            icon: icon,
            title: places[0].name,
            position: places[0].geometry.location
          }));
          if (places[0].geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(places[0].geometry.viewport);
          } else {
            bounds.extend(places[0].geometry.location);
          }
          map.fitBounds(bounds);
      });
  }


  function downloadUrl(url, callback) {
    var request = window.ActiveXObject ? new ActiveXObject('Microsoft.XMLHTTP') : new XMLHttpRequest;
    request.onreadystatechange = function() {
      if (request.readyState == 4) {
        request.onreadystatechange = doNothing;
        callback(request, request.status);
      }
    };
    request.open('GET', url, true);
    request.send(null);
  }

  function doNothing() {}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBeiLe_l1SjazmA39AIBp_hSJHdPQqkH7g&libraries=places&callback=initAutocomplete"
async defer></script>
</body></html>